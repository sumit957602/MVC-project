@{
    ViewData["Title"] = "Home Page";
}


<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <form id="vendorForm" novalidate>
                <div class="mb-3">
                    <label for="vendorSelect" class="form-label">Select Vendor</label>
                    <select class="form-select" id="vendorSelect" aria-describedby="vendorHelp" required>
                        <option value="" selected disabled>Choose a vendor</option>
                        <option value="vendor1">Vendor 1</option>
                        <option value="vendor2">Vendor 2</option>
                        <option value="vendor3">Vendor 3</option>
                    </select>
                    <div id="vendorHelp" class="form-text">Choose a vendor to view their submission requirements.</div>
                </div>

                <div id="vendor1Section" class="border rounded p-3 bg-light mb-3" hidden>
                    <h2 class="h5">Vendor 1 Upload</h2>
                    <p class="mb-2">Upload an Excel file (.xls or .xlsx) that contains exactly the following columns:</p>
                    <ul class="mb-3">
                        <li>Product Quantity</li>
                        <li>Product ID</li>
                        <li>Product Name</li>
                    </ul>
                    <div class="mb-3">
                        <label for="vendor1File" class="form-label">Excel File</label>
                        <input class="form-control" type="file" id="vendor1File" accept=".xls,.xlsx" />
                        <div id="fileError" class="text-danger small mt-2"></div>
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                    <div id="uploadSuccess" class="alert alert-success mt-3 d-none" role="alert"></div>
                </div>

                <div id="otherVendorMessage" class="alert alert-info" role="alert" hidden>
                    File upload is only required when Vendor 1 is selected.
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const vendorSelect = document.getElementById("vendorSelect");
            const vendor1Section = document.getElementById("vendor1Section");
            const otherVendorMessage = document.getElementById("otherVendorMessage");
            const fileInput = document.getElementById("vendor1File");
            const fileError = document.getElementById("fileError");
            const successAlert = document.getElementById("uploadSuccess");
            const form = document.getElementById("vendorForm");
            const allowedExtensions = [".xls", ".xlsx"];
            const requiredHeaders = ["product quantity", "product id", "product name"];
            let parsedFileData = null;

            const resetFeedback = () => {
                fileError.textContent = "";
                successAlert.classList.add("d-none");
                successAlert.textContent = "";
            };

            const resetFileInput = () => {
                fileInput.value = "";
                parsedFileData = null;
            };

            const displayError = (message) => {
                fileError.textContent = message;
                successAlert.classList.add("d-none");
                successAlert.textContent = "";
                resetFileInput();
            };

            vendorSelect.addEventListener("change", () => {
                resetFeedback();
                if (vendorSelect.value === "vendor1") {
                    vendor1Section.hidden = false;
                    otherVendorMessage.hidden = true;
                } else if (vendorSelect.value) {
                    vendor1Section.hidden = true;
                    otherVendorMessage.hidden = false;
                    resetFileInput();
                } else {
                    vendor1Section.hidden = true;
                    otherVendorMessage.hidden = true;
                    resetFileInput();
                }
            });

            fileInput.addEventListener("change", () => {
                resetFeedback();
                const file = fileInput.files[0];
                if (!file) {
                    return;
                }

                const fileName = file.name.toLowerCase();
                const isValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));

                if (!isValidExtension) {
                    displayError("Please upload an Excel file with a .xls or .xlsx extension.");
                    return;
                }

                const reader = new FileReader();
                reader.onload = (event) => {
                    try {
                        const data = new Uint8Array(event.target.result);
                        const workbook = XLSX.read(data, { type: "array" });

                        if (!workbook.SheetNames.length) {
                            throw new Error("The uploaded workbook does not contain any sheets.");
                        }

                        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                        const rows = XLSX.utils.sheet_to_json(firstSheet, { header: 1, defval: "" });

                        if (!rows.length) {
                            throw new Error("The first sheet of the workbook is empty.");
                        }

                        const headers = rows[0].map(header => String(header).trim().toLowerCase());
                        const normalizedHeaders = requiredHeaders.map((_, index) => headers[index] ?? "");
                        const hasMissingHeaders = normalizedHeaders.some(value => value === "");
                        const extraHeaderData = headers.slice(requiredHeaders.length).some(value => value !== "");

                        if (hasMissingHeaders || extraHeaderData || !requiredHeaders.every((header, index) => normalizedHeaders[index] === header)) {
                            throw new Error("The Excel file must include only the columns Product Quantity, Product ID, and Product Name in this order.");
                        }

                        const dataRows = rows.slice(1).filter(row => row.some(cell => String(cell).trim() !== ""));

                        if (!dataRows.length) {
                            throw new Error("The Excel file must contain at least one data row.");
                        }

                        const formattedRows = dataRows.map((row, rowIndex) => {
                            const extraColumnData = row.slice(requiredHeaders.length).some(value => String(value).trim() !== "");
                            if (extraColumnData) {
                                throw new Error(`Row ${rowIndex + 2} contains more than the required three columns.`);
                            }

                            const [quantity, id, name] = requiredHeaders.map((_, index) => row[index] ?? "");

                            const hasEmptyField = [quantity, id, name].some(value => String(value).trim() === "");

                            if (hasEmptyField) {
                                throw new Error(`Row ${rowIndex + 2} must have values for Product Quantity, Product ID, and Product Name.`);
                            }

                            return {
                                productQuantity: quantity,
                                productId: id,
                                productName: name
                            };
                        });

                        parsedFileData = {
                            fileName: file.name,
                            uploadedAt: new Date().toISOString(),
                            rows: formattedRows
                        };

                        successAlert.textContent = `File "${file.name}" validated successfully. Click Upload to save.`;
                        successAlert.classList.remove("d-none");
                    } catch (error) {
                        displayError(error.message);
                    }
                };

                reader.onerror = () => {
                    displayError("An error occurred while reading the file. Please try again.");
                };

                reader.readAsArrayBuffer(file);
            });

            form.addEventListener("submit", (event) => {
                event.preventDefault();
                resetFeedback();

                if (vendorSelect.value !== "vendor1") {
                    return;
                }

                if (!parsedFileData) {
                    fileError.textContent = "Please select and validate an Excel file before uploading.";
                    return;
                }

                try {
                    localStorage.setItem("vendor1Upload", JSON.stringify(parsedFileData));
                    successAlert.textContent = `File "${parsedFileData.fileName}" has been saved to local storage.`;
                    successAlert.classList.remove("d-none");
                    resetFileInput();
                } catch (error) {
                    fileError.textContent = "Unable to save the file to local storage. Please check your browser settings.";
                }
            });
        });
    </script>
}
